"""Job 2 jour 3"""
class CompteBancaire:
    def __init__(self, numero, nom, prenom, solde, decouvert=False):
        self.__numero = numero
        self.__nom = nom
        self.__prenom = prenom
        self.__solde = solde
        self.__decouvert = decouvert
    
    def afficher(self):
        print(f"Compte N¬∞{self.__numero} - Titulaire : {self.__prenom} {self.__nom} - Solde : {self.__solde}‚Ç¨")
    
    def afficherSolde(self):
        print(f"Solde actuel : {self.__solde}‚Ç¨")
    
    def versement(self, montant):
        if montant > 0:
            self.__solde += montant
            print(f"Versement de {montant}‚Ç¨ effectu√©. Nouveau solde : {self.__solde}‚Ç¨")
        else:
            print("Le montant doit √™tre positif.")
    
    def retrait(self, montant):
        if montant > 0:
            if self.__solde >= montant or self.__decouvert:
                self.__solde -= montant
                print(f"Retrait de {montant}‚Ç¨ effectu√©. Nouveau solde : {self.__solde}‚Ç¨")
            else:
                print("Fonds insuffisants et d√©couvert non autoris√©.")
        else:
            print("Le montant doit √™tre positif.")
    
    def agios(self, taux=5):
        if self.__solde < 0:
            frais = abs(self.__solde) * (taux / 100)
            self.__solde -= frais
            print(f"Agios de {frais}‚Ç¨ appliqu√©s. Nouveau solde : {self.__solde}‚Ç¨")
    
    def virement(self, compte_destinataire, montant):
        if montant > 0:
            if self.__solde >= montant or self.__decouvert:
                self.__solde -= montant
                compte_destinataire.versement(montant)
                print(f"Virement de {montant}‚Ç¨ vers le compte N¬∞{compte_destinataire.__numero} √©xecut√©.")
            else:
                print("Virement impossible : fonds insuffisants et d√©couvert non autoris√©.")
        else:
            print("Le montant doit √™tre positif.")



# Cr√©ation des comptes
compte1 = CompteBancaire(12345, "Dupont", "Jean", 1000)
compte2 = CompteBancaire(67890, "Martin", "Sophie", -200, decouvert=True)


compte1.afficher()
compte2.afficher()


compte1.retrait(300)
compte2.agios()
compte1.virement(compte2, 200)


compte1.afficherSolde()
compte2.afficherSolde()





"""Voici une description en mots du code Python correspondant √† votre demande :  

1. **Cr√©ation de la classe `CompteBancaire`** avec des attributs priv√©s :
   - Un **num√©ro de compte**  
   - Un **nom**  
   - Un **pr√©nom**  
   - Un **solde**  
   - Un **attribut d√©couvert** (bool√©en indiquant si le d√©couvert est autoris√©)  

2. **D√©finition des m√©thodes :**  
   - `afficher` : Affiche les informations du compte (num√©ro, nom, pr√©nom, solde).  
   - `afficherSolde` : Affiche uniquement le solde du compte.  
   - `versement` : Ajoute un montant au solde.  
   - `retrait` :  
     - Si le solde est suffisant, soustrait le montant demand√©.  
     - Si le solde est insuffisant et que le d√©couvert est autoris√©, autorise le retrait.  
     - Sinon, affiche un message d‚Äôerreur.  
   - `agios` : Applique des frais suppl√©mentaires si le solde est n√©gatif.  
   - `virement` :  
     - V√©rifie si le solde permet le virement.  
     - D√©duit le montant du compte source et l‚Äôajoute au compte b√©n√©ficiaire.  
     - Affiche un message de confirmation ou d‚Äôerreur.  

3. **Cr√©ation d'une premi√®re instance** avec un solde positif.  
4. **Cr√©ation d'une deuxi√®me instance** avec un solde n√©gatif et un d√©couvert autoris√©.  
5. **Test des diff√©rentes m√©thodes :**  
   - V√©rification de l‚Äôaffichage des comptes.  
   - Effectuer un retrait, un versement et v√©rifier les mises √† jour du solde.  
   - Appliquer des agios sur le compte √† d√©couvert.  
   - R√©aliser un virement du premier compte vers le second pour remettre ce dernier √† z√©ro.  

Cela donne une simulation compl√®te du fonctionnement d'un compte bancaire avec d√©couvert et transactions inter-comptes. üöÄ
"""